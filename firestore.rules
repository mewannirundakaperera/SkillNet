rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ==========================================
    // CORE HELPER FUNCTIONS
    // ==========================================

    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if user owns the resource
    function isResourceOwner() {
      return request.auth.uid == resource.data.userId || 
             request.auth.uid == resource.data.createdBy;
    }
    
    // Check if user owns the request resource on create
    function isRequestCreateOwner() {
      return request.auth.uid == request.resource.data.createdBy || 
             request.auth.uid == request.resource.data.userId;
    }
    
    // Check if user owns the resource for update/delete
    function isRequestOwner() {
      return resource.data.createdBy == request.auth.uid || 
             resource.data.userId == request.auth.uid;
    }

    // Check if user is admin (from user role)
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Check if user is a member of a group (including hidden members)
    function isGroupMemberIncludingHidden(groupId) {
      return exists(/databases/$(database)/documents/groups/$(groupId)) && 
             (request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members || 
              request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.hiddenMembers);
    }

    // Get target group ID for group requests
    function getTargetGroupId() {
      return resource.data.targetGroupId != null ? resource.data.targetGroupId : 
             resource.data.groupId != null ? resource.data.groupId : null;
    }

    // Get target group ID for creating group requests
    function getCreateTargetGroupId() {
      return request.resource.data.targetGroupId != null ? request.resource.data.targetGroupId : 
             request.resource.data.groupId != null ? request.resource.data.groupId : null;
    }

    // Check if user is member of the target group for group requests
    function isTargetGroupMember(targetGroupId) {
      return targetGroupId != null && isGroupMemberIncludingHidden(targetGroupId);
    }

    // ==========================================
    // REQUEST STATUS TRANSITION HELPER FUNCTIONS
    // ==========================================

    // Check if this is a voting update
    function isVotingUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasAny(['votes', 'voteCount']) && 
             changedFields.hasOnly(['votes', 'voteCount', 'updatedAt', 'status']);
    }

    // Check if this is a voting status transition
    function isVotingStatusTransition() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      let statusTransition = resource.data.status == 'open' && request.resource.data.status == 'voting_open';
      let votingFields = changedFields.hasAny(['votes', 'voteCount']);
      return statusTransition && votingFields && 
             changedFields.hasOnly(['votes', 'voteCount', 'status', 'updatedAt']);
    }

    // Check if this is a participation update
    function isParticipationUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasAny(['participants', 'participantCount']) && 
             changedFields.hasOnly(['participants', 'participantCount', 'updatedAt', 'status']);
    }

    // Check if this is a teaching update
    function isTeachingUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasAny(['teachers', 'teacherCount']) && 
             changedFields.hasOnly(['teachers', 'teacherCount', 'updatedAt', 'status']);
    }

    // Check if this is a teaching status transition
    function isTeachingStatusTransition() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      let statusTransition = resource.data.status == 'voting_open' && request.resource.data.status == 'accepted';
      let teachingFields = changedFields.hasAny(['teachers', 'teacherCount']);
      return statusTransition && teachingFields && 
             changedFields.hasOnly(['teachers', 'teacherCount', 'status', 'updatedAt']);
    }

    // Check if this is a teacher selection update
    function isTeacherSelectionUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasAny(['selectedTeacher', 'paymentDeadline', 'paymentDeadlineHours']) && 
             changedFields.hasOnly(['selectedTeacher', 'paymentDeadline', 'paymentDeadlineHours', 'status', 'updatedAt', 'teachers', 'teacherCount']);
    }

    // Check if this is a meeting update
    function isMeetingUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      
      // Must have at least one meeting field
      let hasMeetingFields = changedFields.hasAny(['meetingLink', 'meetingGeneratedAt']);
      
      // All changed fields must be in the allowed list
      let allowedFields = ['meetingLink', 'meetingGeneratedAt', 'status', 'updatedAt'];
      let onlyAllowedFields = changedFields.hasOnly(allowedFields);
      
      // Status transition validation: allow 'paid' to 'live' transition
      let isStatusTransition = resource.data.status == 'paid' && request.resource.data.status == 'live';
      let hasValidStatusChange = isStatusTransition || !changedFields.hasAny(['status']);
      
      // Must have meeting fields, only allowed fields, and valid status change
      return hasMeetingFields && onlyAllowedFields && hasValidStatusChange;
    }

    // Check if this is an automatic status transition
    function isAutoStatusTransition() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      let oldStatus = resource.data.status;
      let newStatus = request.resource.data.status;
      let validTransitions = (oldStatus == 'funding' && newStatus == 'paid') || 
                            (oldStatus == 'paid' && newStatus == 'live') || 
                            (oldStatus == 'live' && newStatus == 'complete') || 
                            newStatus == 'cancelled';
      return validTransitions && 
             changedFields.hasOnly(['status', 'updatedAt', 'fundingExpiredAt', 'completedAt', 'meetingEndedAt']);
    }

    // Check if this is a payment update
    function isPaymentUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasAny(['paidParticipants', 'totalPaid']) && 
             changedFields.hasOnly(['paidParticipants', 'totalPaid', 'updatedAt', 'status']);
    }

    // Check if this is a content update
    function isContentUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      
      // Check for content field changes
      let hasContentFields = changedFields.hasAny(['title', 'description', 'rate', 'skills', 'category', 'duration']);
      
      // Check for status changes that aren't handled by other functions
      let hasStatusChange = changedFields.hasAny(['status']);
      let isStatusHandledByOtherFunctions = isVotingUpdate() || isParticipationUpdate() || 
                                          isTeachingUpdate() || isTeachingStatusTransition() || 
                                          isPaymentUpdate() || isTeacherSelectionUpdate() || 
                                          isMeetingUpdate() || isAutoStatusTransition();
      
      return hasContentFields || (hasStatusChange && !isStatusHandledByOtherFunctions);
    }

    // ==========================================
    // VALIDATION HELPER FUNCTIONS
    // ==========================================

    // Validate that vote changes are legitimate
    function isValidVoteChange() {
      let oldVotes = resource.data.votes != null ? resource.data.votes : [];
      let newVotes = request.resource.data.votes != null ? request.resource.data.votes : [];
      let addingVote = !(request.auth.uid in oldVotes) && (request.auth.uid in newVotes) && 
                       newVotes.size() == oldVotes.size() + 1;
      let removingVote = (request.auth.uid in oldVotes) && !(request.auth.uid in newVotes) && 
                         newVotes.size() == oldVotes.size() - 1;
      return addingVote || removingVote;
    }

    // Validate that participation changes are legitimate
    function isValidParticipationChange() {
      let oldParticipants = resource.data.participants != null ? resource.data.participants : [];
      let newParticipants = request.resource.data.participants != null ? request.resource.data.participants : [];
      let joining = !(request.auth.uid in oldParticipants) && (request.auth.uid in newParticipants) && 
                    newParticipants.size() == oldParticipants.size() + 1;
      let leaving = (request.auth.uid in oldParticipants) && !(request.auth.uid in newParticipants) && 
                    newParticipants.size() == oldParticipants.size() - 1;
      return joining || leaving;
    }

    // Validate that teaching changes are legitimate
    function isValidTeachingChange() {
      let oldTeachers = resource.data.teachers != null ? resource.data.teachers : [];
      let newTeachers = request.resource.data.teachers != null ? request.resource.data.teachers : [];
      let joining = !(request.auth.uid in oldTeachers) && (request.auth.uid in newTeachers) && 
                    newTeachers.size() == oldTeachers.size() + 1;
      let leaving = (request.auth.uid in oldTeachers) && !(request.auth.uid in newTeachers) && 
                    newTeachers.size() == oldTeachers.size() - 1;
      return joining || leaving;
    }

    // Validate payment changes
    function isValidPaymentChange() {
      let oldPaid = resource.data.paidParticipants != null ? resource.data.paidParticipants : [];
      let newPaid = request.resource.data.paidParticipants != null ? request.resource.data.paidParticipants : [];
      let isAutomaticParticipant = request.auth.uid == resource.data.userId || 
                                   request.auth.uid == resource.data.createdBy || 
                                   request.auth.uid in resource.data.votes;
      let isManualParticipant = request.auth.uid in resource.data.participants;
      let userCanPay = isAutomaticParticipant || isManualParticipant;
      let makingPayment = !(request.auth.uid in oldPaid) && (request.auth.uid in newPaid) && 
                          newPaid.size() == oldPaid.size() + 1;
      return userCanPay && makingPayment;
    }

    // ==========================================
    // REQUEST ACCEPTANCE/COMPLETION FUNCTIONS
    // ==========================================

    // Check if this is a request acceptance update
    function isRequestAcceptanceUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      let statusChange = resource.data.status == 'open' && request.resource.data.status == 'active';
      let acceptedByCurrentUser = request.resource.data.acceptedBy == request.auth.uid;
      return statusChange && acceptedByCurrentUser && 
             changedFields.hasAll(['status', 'acceptedBy']) &&
             changedFields.hasOnly(['status', 'acceptedBy', 'acceptedByName', 'acceptedAt', 
                                   'meetingId', 'meetingUrl', 'roomId', 'meetingStatus', 
                                   'participants', 'participantCount', 'responses', 'responseCount', 'updatedAt']);
    }

    // Check if this is a request completion update
    function isRequestCompletionUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      let statusToCompleted = request.resource.data.status == 'completed';
      let isParticipantOrOwner = isRequestOwner() || 
                                 request.auth.uid in resource.data.participants || 
                                 request.auth.uid == resource.data.acceptedBy;
      return statusToCompleted && isParticipantOrOwner && 
             changedFields.hasOnly(['status', 'completedAt', 'meetingStatus', 'updatedAt']);
    }

    // ==========================================
    // USER DATA COLLECTIONS
    // ==========================================

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    match /userProfiles/{userId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && isOwner(userId);
    }

    match /userActivity/{activityId} {
      allow read: if isAuthenticated() && (isResourceOwner() || isRequestOwner() || isAdmin());
      allow create: if isAuthenticated() && (isResourceOwner() || isRequestOwner());
      allow update, delete: if isAuthenticated() && (isResourceOwner() || isRequestOwner() || isAdmin());
    }

    match /connections/{connectionId} {
      allow read: if isAuthenticated() && (isResourceOwner() || isRequestOwner() || isAdmin());
      allow create: if isAuthenticated() && (isResourceOwner() || isRequestOwner());
      allow update, delete: if isAuthenticated() && (isResourceOwner() || isRequestOwner() || isAdmin());
    }

    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (isResourceOwner() || isRequestOwner() || isAdmin());
      allow create: if isAuthenticated() && (isResourceOwner() || isRequestOwner());
      allow update, delete: if isAuthenticated() && (isResourceOwner() || isRequestOwner() || isAdmin());
    }

    // ==========================================
    // ADMIN COLLECTIONS
    // ==========================================

    match /admin/{adminId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    match /adminData/{document=**} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    // ==========================================
    // GROUPS COLLECTION
    // ==========================================

    match /groups/{groupId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        request.auth.uid in resource.data.members || 
        request.auth.uid in resource.data.hiddenMembers || 
        isAdmin()
      );
      
      allow create: if isAuthenticated() && (
        (request.resource.data.createdBy == request.auth.uid && 
         request.auth.uid in request.resource.data.members) || 
        isAdmin()
      );
      
      allow update: if isAuthenticated() && (
        isAdmin() || 
        resource.data.createdBy == request.auth.uid || 
        request.auth.uid in resource.data.members || 
        request.auth.uid in resource.data.hiddenMembers
      );
      
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid || 
        isAdmin()
      );

      // Group messages
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (isGroupMemberIncludingHidden(groupId) || isAdmin());
        allow create: if isAuthenticated() && (
          isGroupMemberIncludingHidden(groupId) && 
          request.resource.data.userId == request.auth.uid
        ) || isAdmin();
        allow update, delete: if isAuthenticated() && (
          isGroupMemberIncludingHidden(groupId) && 
          resource.data.userId == request.auth.uid
        ) || isAdmin();
      }

      // Group active users
      match /activeUsers/{userId} {
        allow read: if isAuthenticated() && (isGroupMemberIncludingHidden(groupId) || isAdmin());
        allow write: if isAuthenticated() && (
          (isGroupMemberIncludingHidden(groupId) && isOwner(userId)) || 
          isAdmin()
        );
      }

      // Group typing status
      match /typingStatus/{userId} {
        allow read: if isAuthenticated() && (isGroupMemberIncludingHidden(groupId) || isAdmin());
        allow write: if isAuthenticated() && (
          (isGroupMemberIncludingHidden(groupId) && isOwner(userId)) || 
          isAdmin()
        );
      }
    }

    // ==========================================
    // REQUEST COLLECTIONS
    // ==========================================

    // One-to-one requests
    match /requests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isRequestCreateOwner();
      allow update: if isAuthenticated() && (
        isRequestOwner() || 
        isRequestAcceptanceUpdate() || 
        isRequestCompletionUpdate() || 
        isAdmin()
      );
      allow delete: if isAuthenticated() && (isRequestOwner() || isAdmin());
    }

    // Group requests
    match /grouprequests/{requestId} {
      allow read: if true; // Public read access
      
      allow create: if isAuthenticated() && isRequestCreateOwner() && (
        (getCreateTargetGroupId() != null && isTargetGroupMember(getCreateTargetGroupId())) || 
        isAdmin()
      );
      
      allow update: if isAuthenticated() && (
        // Content updates (owner or admin only)
        (isContentUpdate() && (isRequestOwner() || isAdmin())) ||
        
        // Voting updates (group members, not owner)
        (isVotingUpdate() && !isRequestOwner() && 
         getTargetGroupId() != null && 
         isTargetGroupMember(getTargetGroupId()) && 
         isValidVoteChange()) ||
        
        // Voting status transitions
        (isVotingStatusTransition() && !isRequestOwner() && 
         getTargetGroupId() != null && 
         isTargetGroupMember(getTargetGroupId()) && 
         isValidVoteChange()) ||
        
        // Participation updates
        (isParticipationUpdate() && 
         getTargetGroupId() != null && 
         isTargetGroupMember(getTargetGroupId()) && 
         isValidParticipationChange()) ||
        
        // Teaching updates
        (isTeachingUpdate() && 
         getTargetGroupId() != null && 
         isTargetGroupMember(getTargetGroupId()) && 
         isValidTeachingChange()) ||
        
        // Teaching status transitions
        (isTeachingStatusTransition() && 
         getTargetGroupId() != null && 
         isTargetGroupMember(getTargetGroupId()) && 
         isValidTeachingChange()) ||
        
        // Teacher selection (owner only)
        (isTeacherSelectionUpdate() && isRequestOwner()) ||
        
        // Meeting updates (selected teacher only) - PRIORITY RULE
        (isMeetingUpdate() && request.auth.uid == resource.data.selectedTeacher) ||
        
        // Payment updates
        (isPaymentUpdate() && 
         (request.auth.uid in resource.data.participants || 
          request.auth.uid in resource.data.votes || 
          request.auth.uid == resource.data.userId || 
          request.auth.uid == resource.data.createdBy) && 
         isValidPaymentChange()) ||
        
        // Auto status transitions
        (isAutoStatusTransition() && 
         (isRequestOwner() || 
          request.auth.uid in resource.data.participants || 
          request.auth.uid in resource.data.teachers || 
          request.auth.uid == resource.data.selectedTeacher || 
          request.auth.uid in resource.data.votes || 
          isAdmin())) ||
        
        // Admin override
        isAdmin()
      );

      allow delete: if isAuthenticated() && (isRequestOwner() || isAdmin());
    }

    // Request responses
    match /requestResponses/{responseId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.responderId || 
        request.auth.uid == resource.data.requestOwnerId || 
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.responderId || 
        isAdmin()
      );
    }

    // Hidden requests
    match /hiddenRequests/{hiddenId} {
      allow read, write: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.userId || 
        isAdmin()
      );
    }

    // ==========================================
    // SOCIAL AND CONTENT COLLECTIONS
    // ==========================================

    // Posts
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isRequestOwner();
      allow update, delete: if isAuthenticated() && (isResourceOwner() || isAdmin());
    }

    // Post comments
    match /posts/{postId}/comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isRequestOwner();
      allow update, delete: if isAuthenticated() && (isResourceOwner() || isAdmin());
    }

    // ==========================================
    // CHAT AND MESSAGING
    // ==========================================

    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && (
        request.auth.uid in resource.data.participants || 
        request.auth.uid in request.resource.data.participants || 
        isAdmin()
      );
    }

    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if isAuthenticated() && (
        request.auth.uid in resource.data.participants || 
        request.auth.uid in request.resource.data.participants || 
        isAdmin()
      );
    }

    // ==========================================
    // ACTIVITY AND ANALYTICS
    // ==========================================

    match /activities/{activityId} {
      allow read: if isAuthenticated() && (isResourceOwner() || isAdmin());
      allow write: if isAuthenticated() && (isResourceOwner() || isRequestOwner() || isAdmin());
    }

    // ==========================================
    // PUBLIC DATA
    // ==========================================

    match /publicData/{document} {
      allow read: if true;
      allow write: if isAuthenticated() && isAdmin();
    }

    // ==========================================
    // ADDITIONAL FEATURES
    // ==========================================

    // Feedback
    match /feedback/{feedbackId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isRequestOwner();
      allow update, delete: if isAuthenticated() && (isResourceOwner() || isAdmin());
    }

    // Payments
    match /payments/{paymentId} {
      allow read, write: if isAuthenticated() && (isResourceOwner() || isAdmin());
    }

    // Session materials
    match /sessionMaterials/{materialId} {
      allow read: if isAuthenticated() && (
        isResourceOwner() || 
        request.auth.uid in resource.data.participants || 
        isAdmin()
      );
      allow create: if isAuthenticated() && isRequestOwner();
      allow update, delete: if isAuthenticated() && (isResourceOwner() || isAdmin());
    }

    // ==========================================
    // MEETINGS COLLECTION
    // ==========================================

    match /meetings/{meetingId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.hostUserId || 
        request.auth.uid in resource.data.participants || 
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.hostUserId || 
        request.auth.uid in resource.data.participants || 
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.hostUserId || 
        isAdmin()
      );
    }

    // ==========================================
    // SECURITY: DENY ALL OTHER ACCESS BY DEFAULT
    // ==========================================

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
