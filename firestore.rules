rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ==========================================
    // HELPER FUNCTIONS
    // ==========================================

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if user owns the resource
    function isResourceOwner() {
      return request.auth.uid == resource.data.userId ||
             request.auth.uid == resource.data.createdBy;
    }
    
    // Helper function to check if user owns the request resource on create
    function isRequestCreateOwner() {
      return request.auth.uid == request.resource.data.createdBy ||
             request.auth.uid == request.resource.data.userId;
    }
    
    // Helper function to check if user owns the resource for update/delete
    function isRequestOwner() {
      return resource.data.createdBy == request.auth.uid ||
             resource.data.userId == request.auth.uid;
    }
    
    // Helper function to check if user is a member of a group (including hidden members)
    function isGroupMemberIncludingHidden(groupId) {
      let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return request.auth.uid in groupData.members || 
             request.auth.uid in groupData.hiddenMembers;
    }

    // Helper function to check if user is member of the target group for group requests
    // Safely handles different field names
    function getTargetGroupId() {
      return resource.data.targetGroupId != null ? resource.data.targetGroupId :
             resource.data.groupId != null ? resource.data.groupId : null;
    }

    function getCreateTargetGroupId() {
      return request.resource.data.targetGroupId != null ? request.resource.data.targetGroupId :
             request.resource.data.groupId != null ? request.resource.data.groupId : null;
    }

    function isTargetGroupMember(targetGroupId) {
      return targetGroupId != null && 
             exists(/databases/$(database)/documents/groups/$(targetGroupId)) &&
             (request.auth.uid in get(/databases/$(database)/documents/groups/$(targetGroupId)).data.members || 
              request.auth.uid in get(/databases/$(database)/documents/groups/$(targetGroupId)).data.hiddenMembers);
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin/$(request.auth.uid)) ||
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // ==========================================
    // ðŸ”¥ NEW HELPER FUNCTIONS FOR GROUP REQUEST VOTING
    // ==========================================

    // Check if this is a voting update
    function isVotingUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasAny(['votes', 'voteCount']) && 
             changedFields.hasOnly(['votes', 'voteCount', 'updatedAt', 'status']);
    }

    // Check if this is a participation update
    function isParticipationUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasAny(['participants', 'participantCount']) && 
             changedFields.hasOnly(['participants', 'participantCount', 'updatedAt', 'status']);
    }

    // Check if this is a payment update
    function isPaymentUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasAny(['paidParticipants', 'totalPaid']) && 
             changedFields.hasOnly(['paidParticipants', 'totalPaid', 'updatedAt', 'status', 'scheduledDateTime']);
    }

    // Check if this is a content update
    function isContentUpdate() {
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasAny(['title', 'description', 'rate', 'skills', 'category']) ||
             (changedFields.hasAny(['status']) && !isVotingUpdate() && !isParticipationUpdate() && !isPaymentUpdate());
    }

    // Validate that vote changes are legitimate (user adding/removing their own vote)
    function isValidVoteChange() {
      let oldVotes = resource.data.votes != null ? resource.data.votes : [];
      let newVotes = request.resource.data.votes != null ? request.resource.data.votes : [];
      
      // Adding vote: user not in old votes, user in new votes, size increased by 1
      let addingVote = !(request.auth.uid in oldVotes) && 
                       (request.auth.uid in newVotes) && 
                       newVotes.size() == oldVotes.size() + 1;
      
      // Removing vote: user in old votes, user not in new votes, size decreased by 1
      let removingVote = (request.auth.uid in oldVotes) && 
                         !(request.auth.uid in newVotes) && 
                         newVotes.size() == oldVotes.size() - 1;
      
      return addingVote || removingVote;
    }

    // Validate that participation changes are legitimate (user adding/removing themselves)
    function isValidParticipationChange() {
      let oldParticipants = resource.data.participants != null ? resource.data.participants : [];
      let newParticipants = request.resource.data.participants != null ? request.resource.data.participants : [];
      
      // Adding participation: user not in old participants, user in new participants, size increased by 1
      let joining = !(request.auth.uid in oldParticipants) && 
                    (request.auth.uid in newParticipants) && 
                    newParticipants.size() == oldParticipants.size() + 1;
      
      // Removing participation: user in old participants, user not in new participants, size decreased by 1
      let leaving = (request.auth.uid in oldParticipants) && 
                    !(request.auth.uid in newParticipants) && 
                    newParticipants.size() == oldParticipants.size() - 1;
      
      return joining || leaving;
    }

    // ==========================================
    // USER DATA COLLECTIONS
    // ==========================================

    match /users/{userId} {
      // âœ… FIXED: Allow reading all user profiles for authenticated users
      // This is needed for OneToOneRequests page to display request creator information
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }

    match /userProfiles/{userId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && isOwner(userId);
    }

    match /userActivity/{activityId} {
      allow read, write: if isAuthenticated() && (isResourceOwner() || isRequestOwner());
    }

    match /connections/{connectionId} {
      allow read, write: if isAuthenticated() && (isResourceOwner() || isRequestOwner());
    }

    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && (isResourceOwner() || isRequestOwner());
    }

    // ==========================================
    // ADMIN COLLECTIONS
    // ==========================================

    match /admin/{adminId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && (isOwner(adminId) || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }

    // ==========================================
    // GROUPS COLLECTION
    // ==========================================

    match /groups/{groupId} {
      allow read: if isAuthenticated() &&
          (resource.data.isPublic == true || 
           request.auth.uid in resource.data.members || 
           request.auth.uid in resource.data.hiddenMembers ||
           isAdmin());
      
      allow create: if isAuthenticated() &&
          (request.resource.data.createdBy == request.auth.uid &&
           request.auth.uid in request.resource.data.members) ||
          isAdmin();
      
      allow update: if isAuthenticated() &&
          (isAdmin() ||
           resource.data.createdBy == request.auth.uid ||
           request.auth.uid in resource.data.members || 
           request.auth.uid in resource.data.hiddenMembers ||
           (resource.data.isPublic == true && request.auth.uid in request.resource.data.members) ||
           !(request.auth.uid in request.resource.data.members) && (request.auth.uid in resource.data.members));
      
      allow delete: if isAuthenticated() && 
          (resource.data.createdBy == request.auth.uid || isAdmin());

      match /messages/{messageId} {
        allow read: if isAuthenticated() && (isGroupMemberIncludingHidden(groupId) || isAdmin());
        allow create: if isAuthenticated() && ((isGroupMemberIncludingHidden(groupId) && request.resource.data.userId == request.auth.uid) || isAdmin());
        allow update, delete: if isAuthenticated() && ((isGroupMemberIncludingHidden(groupId) && resource.data.userId == request.auth.uid) || isAdmin());
      }

      match /activeUsers/{userId} {
        allow read: if isAuthenticated() && (isGroupMemberIncludingHidden(groupId) || isAdmin());
        allow write: if isAuthenticated() && ((isGroupMemberIncludingHidden(groupId) && isOwner(userId)) || isAdmin());
      }

      match /typingStatus/{userId} {
        allow read: if isAuthenticated() && (isGroupMemberIncludingHidden(groupId) || isAdmin());
        allow write: if isAuthenticated() && ((isGroupMemberIncludingHidden(groupId) && isOwner(userId)) || isAdmin());
      }
    }

    // ==========================================
    // REQUEST COLLECTIONS
    // ==========================================

    match /requests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isRequestCreateOwner();
      allow update, delete: if isAuthenticated() && (isRequestOwner() || isAdmin());
    }

    // ==========================================
    // âœ… FIXED GROUP REQUESTS COLLECTION - THIS IS THE KEY FIX!
    // ==========================================

    match /grouprequests/{requestId} {
      // Public read access: anyone can read group requests
      allow read: if true;

      // Create allowed only if user is authenticated and owner and is member of target group or admin
      allow create: if isAuthenticated() && isRequestCreateOwner() && (
        (getCreateTargetGroupId() != null && isTargetGroupMember(getCreateTargetGroupId())) ||
        isAdmin()
      );

      // âœ… COMPLETELY REWRITTEN UPDATE RULES TO ALLOW VOTING/PARTICIPATION
      allow update: if isAuthenticated() && (
        
        // 1. CONTENT UPDATES (title, description, status changes) - Only owners and admins
        (isContentUpdate() && (isRequestOwner() || isAdmin())) ||
        
        // 2. VOTING UPDATES - Group members can vote (except on their own requests)
        (isVotingUpdate() && 
         !isRequestOwner() && 
         getTargetGroupId() != null && 
         isTargetGroupMember(getTargetGroupId()) && 
         isValidVoteChange()) ||
        
        // 3. PARTICIPATION UPDATES - Group members can join/leave (including owners)
        (isParticipationUpdate() && 
         getTargetGroupId() != null && 
         isTargetGroupMember(getTargetGroupId()) && 
         isValidParticipationChange()) ||
        
        // 4. PAYMENT UPDATES - Only participants can make payments
        (isPaymentUpdate() && 
         request.auth.uid in resource.data.participants) ||
        
        // 5. ADMIN OVERRIDE - Admins can update anything
        isAdmin() ||
        
        // 6. STATUS TRANSITIONS - Allow automatic status updates for relevant users
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'scheduledDateTime', 'conferenceLink']) &&
         (isRequestOwner() || request.auth.uid in resource.data.participants || isAdmin()))
      );

      // Delete allowed for owners and admins only
      allow delete: if isAuthenticated() && (isRequestOwner() || isAdmin());
    }

    // ==========================================
    // âœ… FIXED: REQUEST RESPONSES COLLECTION - FOR ONE-TO-ONE REQUESTS
    // ==========================================

    match /requestResponses/{responseId} {
      // Users can read responses to requests they own or have responded to
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.responderId ||
        request.auth.uid == resource.data.requestOwnerId || // Request owner ID
        isAdmin()
      );
      
      // Users can create responses only for themselves
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.responderId;
      
      // Users can update/delete only their own responses
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.responderId;
    }

    // ==========================================
    // âœ… FIXED: HIDDEN REQUESTS COLLECTION - FOR "NOT INTERESTED" FEATURE
    // ==========================================

    match /hiddenRequests/{hiddenId} {
      // Users can only read/write their own hidden requests
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Allow creation of new hidden requests
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // ==========================================
    // POSTS AND SOCIAL FEATURES
    // ==========================================

    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isRequestOwner();
      allow update, delete: if isAuthenticated() && isResourceOwner();
    }

    match /posts/{postId}/comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isRequestOwner();
      allow update, delete: if isAuthenticated() && isResourceOwner();
    }

    // ==========================================
    // CHAT AND MESSAGING
    // ==========================================

    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if isAuthenticated() && (
          request.auth.uid in resource.data.participants || 
          request.auth.uid in request.resource.data.participants ||
          isAdmin()
      );
    }

    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && (
          request.auth.uid in resource.data.participants || 
          request.auth.uid in request.resource.data.participants ||
          isAdmin()
      );
    }

    // ==========================================
    // ACTIVITY AND ANALYTICS
    // ==========================================

    match /activities/{activityId} {
      allow read: if isAuthenticated() && (isResourceOwner() || isAdmin());
      allow write: if isAuthenticated() && (isResourceOwner() || isRequestOwner() || isAdmin());
    }

    // ==========================================
    // PUBLIC AND ADMIN DATA
    // ==========================================

    match /adminData/{document=**} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    match /publicData/{document} {
      allow read: if true;
      allow write: if isAuthenticated() || isAdmin();
    }

    // ==========================================
    // ADDITIONAL COLLECTIONS
    // ==========================================

    match /feedback/{feedbackId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isRequestOwner();
      allow update, delete: if isAuthenticated() && (isResourceOwner() || isAdmin());
    }

    match /payments/{paymentId} {
      allow read, write: if isAuthenticated() && (isResourceOwner() || isAdmin());
    }

    match /sessionMaterials/{materialId} {
      allow read: if isAuthenticated() && (
        isResourceOwner() ||
        request.auth.uid in resource.data.participants ||
        isAdmin()
      );
      allow create: if isAuthenticated() && isRequestOwner();
      allow update, delete: if isAuthenticated() && (isResourceOwner() || isAdmin());
    }

    // ==========================================
    // MEETINGS COLLECTION (if you have one)
    // ==========================================

    match /meetings/{meetingId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.hostUserId ||
        request.auth.uid in resource.data.participants ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.hostUserId ||
        request.auth.uid in resource.data.participants ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.hostUserId || 
        isAdmin()
      );
    }

    // ==========================================
    // DENY ALL OTHER ACCESS BY DEFAULT
    // ==========================================

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
